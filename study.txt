View : div
Text : span

**앱은 사용자가 사용하기 전에 preload 되어야 함**

Stack.Navigator : ReactJS의 Router
TouchableOpacity : button과 비슷
-onPress(함수) 속성 : 터치할 때 함수 시행

navigation.navigate("Stack.Screen의 이름 ex] Login", {
    userName,
    password,
}) -> "Login" 라는 이름을 가진 Screen으로 보내줌. userName과 password라는 정보와 함께

navigation.setOptions({
    title: "blabla",
}) -> 헤더를 설정할 수 있음


TextInput : input
-onChangeText : text가 바뀌었을 때 실행, 방금 바뀐 text를 arg로 줌

<Tab.Screen name="Something">
    <Stack.Navigator>
      <Stack.Screen name="Profile" component={Profile} />
      <Stack.Screen name="Photo" component={Photo} />
    </Stack.Navigator>
</Tab.Screen>
=> "Something" tab안에서 "Profile", "Photo" 스택 화면 볼 수 있다.(Tab과 Stack의 결합)

Native 상에서 리스트를 표현할 때
1. ScrollView : 모든 children을 한번에 load
-refreshControl 속성 안에 <RefreshControl /> component 사용해서 당겨서 새로고침 구현 가능.
2. FlatList : children을 한번에 load하지 않음. (infinite scroll 구현 가능)
-FlatLsit의 properties
-아래로 당기면 새로고침 : refreshing : true일때 refresh, onRefresh : 당길 때 실행되는 함수
-스크롤이 마지막 요소에 도달할 때 함수 호출 : onEndReached
-마지막 요소 설정 : onEndReachedThreshold
-아이템들 사이에 separator 생성 (마지막 제외) : ItemSeparatorComponent

Native 상에서 Image를 표현할 때
-width, height 필수 지정

const [startQueryFn, {loading, data}] = useLazyQuery(SEARCH_QUERY);
-> startQueryFn이 실행 될 때 SEARCH_QUERY가 실행된다.

TabsNav를 UploadNav와 구별하기 위해 아예 별개의 Stack Screen으로 만듦.

useWindowDimensions()
-> 현재 화면의 넓이 계산